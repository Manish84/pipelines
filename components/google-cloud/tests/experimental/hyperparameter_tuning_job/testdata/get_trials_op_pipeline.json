{
  "components": {
    "comp-get-trials": {
      "executorLabel": "exec-get-trials",
      "inputDefinitions": {
        "parameters": { "gcp_resources": { "parameterType": "STRING" } }
      },
      "outputDefinitions": {
        "parameters": { "output": { "parameterType": "LIST" } }
      }
    }
  },
  "deploymentSpec": {
    "executors": {
      "exec-get-trials": {
        "container": {
          "args": [
            "--gcp-resources",
            "{{$.inputs.parameters['gcp_resources']}}",
            "----output-paths",
            "{{$.outputs.parameters['output'].output_file}}"
          ],
          "command": [
            "sh",
            "-c",
            "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-cloud-aiplatform==1.18.3' 'google-cloud-pipeline-components==1.0.26' 'protobuf==4.21.9' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-cloud-aiplatform==1.18.3' 'google-cloud-pipeline-components==1.0.26' 'protobuf==4.21.9' --user) && \"$0\" \"$@\"",
            "sh",
            "-ec",
            "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
            "def get_trials(gcp_resources):\n  \"\"\"Retrieves the best trial from the trials.\n\n  Args:\n      gcp_resources (str): Proto tracking the hyperparameter tuning job.\n\n  Returns:\n      List of strings representing the intermediate JSON representation of the\n      trials from the hyperparameter tuning job.\n  \"\"\"\n  from google.cloud.aiplatform import aiplatform\n  from google_cloud_pipeline_components.google_cloud_pipeline_components.proto.gcp_resources_pb2 import GcpResources\n  from google3.net.proto2.python.public.json_format import Parse\n  from google.cloud.aiplatform.aiplatform_v1.types import study\n\n  api_endpoint_suffix = '-aiplatform.googleapis.com'\n  gcp_resources_proto = Parse(gcp_resources, GcpResources())\n  gcp_resources_split = gcp_resources_proto.resources[0].resource_uri.partition(\n      'projects')\n  resource_name = gcp_resources_split[1] + gcp_resources_split[2]\n  prefix_str = gcp_resources_split[0]\n  prefix_str = prefix_str[:prefix_str.find(api_endpoint_suffix)]\n  api_endpoint = prefix_str[(prefix_str.rfind('//') + 2):] + api_endpoint_suffix\n\n  client_options = {'api_endpoint': api_endpoint}\n  job_client = aiplatform.gapic.JobServiceClient(client_options=client_options)\n  response = job_client.get_hyperparameter_tuning_job(name=resource_name)\n\n  return [study.Trial.to_json(trial) for trial in response.trials]\n\ndef _serialize_json(obj) -> str:\n    if isinstance(obj, str):\n        return obj\n    import json\n\n    def default_serializer(obj):\n        if hasattr(obj, 'to_struct'):\n            return obj.to_struct()\n        else:\n            raise TypeError(\n                \"Object of type '%s' is not JSON serializable and does not have .to_struct() method.\"\n                % obj.__class__.__name__)\n\n    return json.dumps(obj, default=default_serializer, sort_keys=True)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Get trials', description='Retrieves the best trial from the trials.')\n_parser.add_argument(\"--gcp-resources\", dest=\"gcp_resources\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = get_trials(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_json,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
          ],
          "image": "python:3.10"
        }
      }
    }
  },
  "pipelineInfo": { "name": "get-trials-op-test" },
  "root": {
    "dag": {
      "tasks": {
        "get-trials": {
          "cachingOptions": { "enableCache": true },
          "componentRef": { "name": "comp-get-trials" },
          "inputs": {
            "parameters": {
              "gcp_resources": {
                "runtimeValue": {
                  "constant": "{ \"resources\": [ { \"resourceType\": \"HyperparameterTuningJob\", \"resourceUri\": \"https://us-central1-aiplatform.googleapis.com/v1/projects/186556260430/locations/us-central1/hyperparameterTuningJobs/1234567890123456789\" } ] }"
                }
              }
            }
          },
          "taskInfo": { "name": "get-trials" }
        }
      }
    }
  }
}
